// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "ddvue.h"

/////////////////////////////////////////////////////////////////////////////
// CDDVue

IMPLEMENT_DYNCREATE(CDDVue, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CDDVue properties

long CDDVue::GetErrorNumber()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CDDVue::SetErrorNumber(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

BOOL CDDVue::GetDoubleBuffer()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetDoubleBuffer(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CDDVue::GetRightMouseMenu()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetRightMouseMenu(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

long CDDVue::GetRender()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CDDVue::SetRender(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

OLE_COLOR CDDVue::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CDDVue::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CDDVue::GetRenderMode()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CDDVue::SetRenderMode(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

long CDDVue::GetTriPointsPerEdge()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CDDVue::SetTriPointsPerEdge(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

double CDDVue::GetTriMaxFacetEdgeLength()
{
	double result;
	GetProperty(0xd, VT_R8, (void*)&result);
	return result;
}

void CDDVue::SetTriMaxFacetEdgeLength(double propVal)
{
	SetProperty(0xd, VT_R8, propVal);
}

double CDDVue::GetTriNormalTolerance()
{
	double result;
	GetProperty(0xe, VT_R8, (void*)&result);
	return result;
}

void CDDVue::SetTriNormalTolerance(double propVal)
{
	SetProperty(0xe, VT_R8, propVal);
}

double CDDVue::GetTriSurfaceTolerance()
{
	double result;
	GetProperty(0xf, VT_R8, (void*)&result);
	return result;
}

void CDDVue::SetTriSurfaceTolerance(double propVal)
{
	SetProperty(0xf, VT_R8, propVal);
}

double CDDVue::GetTriGridAspectRatio()
{
	double result;
	GetProperty(0x10, VT_R8, (void*)&result);
	return result;
}

void CDDVue::SetTriGridAspectRatio(double propVal)
{
	SetProperty(0x10, VT_R8, propVal);
}

long CDDVue::GetTriMaxNumGridLines()
{
	long result;
	GetProperty(0x11, VT_I4, (void*)&result);
	return result;
}

void CDDVue::SetTriMaxNumGridLines(long propVal)
{
	SetProperty(0x11, VT_I4, propVal);
}

BOOL CDDVue::GetMonochrome()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetMonochrome(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}

BOOL CDDVue::GetR14Convert()
{
	BOOL result;
	GetProperty(0x2e, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetR14Convert(BOOL propVal)
{
	SetProperty(0x2e, VT_BOOL, propVal);
}

short CDDVue::GetDbmod()
{
	short result;
	GetProperty(0x45, VT_I2, (void*)&result);
	return result;
}

void CDDVue::SetDbmod(short propVal)
{
	SetProperty(0x45, VT_I2, propVal);
}

BOOL CDDVue::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

BOOL CDDVue::GetCaching()
{
	BOOL result;
	GetProperty(0x52, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetCaching(BOOL propVal)
{
	SetProperty(0x52, VT_BOOL, propVal);
}

BOOL CDDVue::GetDragAndDrop()
{
	BOOL result;
	GetProperty(0x5a, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetDragAndDrop(BOOL propVal)
{
	SetProperty(0x5a, VT_BOOL, propVal);
}

BOOL CDDVue::GetRecoverIfNeeded()
{
	BOOL result;
	GetProperty(0x5e, VT_BOOL, (void*)&result);
	return result;
}

void CDDVue::SetRecoverIfNeeded(BOOL propVal)
{
	SetProperty(0x5e, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CDDVue operations

void CDDVue::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CDDVue::Open(LPCTSTR bstrDrawingFilename, const VARIANT& bstrDrawingPassword, const VARIANT& pZoomExtents)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bstrDrawingFilename, &bstrDrawingPassword, &pZoomExtents);
	return result;
}

BOOL CDDVue::Close()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CDDVue::Display()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CDDVue::XMLReport(LPCTSTR szXMLFilename, long attributes, long attributeDefinitions, long referenceFiles, long lLayers, long lLayouts, long lSystemVariables, long lImages, long lText)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szXMLFilename, attributes, attributeDefinitions, referenceFiles, lLayers, lLayouts, lSystemVariables, lImages, lText);
	return result;
}

void CDDVue::ZoomIn(double dFactor)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dFactor);
}

void CDDVue::ZoomOut(double dFactor)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dFactor);
}

BOOL CDDVue::AttributeUpdateByHandle(LPCTSTR attributeValue, LPCTSTR attributeHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		attributeValue, attributeHandle);
	return result;
}

BOOL CDDVue::InsertBlock(BSTR* szNewObjectHandle, LPCTSTR space, LPCTSTR blockName, double x, double y, double z, double xs, double ys, double zs, double rotationAngle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_BSTR VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, space, blockName, x, y, z, xs, ys, zs, rotationAngle);
	return result;
}

BOOL CDDVue::SetLayout(LPCTSTR layoutName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		layoutName);
	return result;
}

BOOL CDDVue::SaveDrawing(LPCTSTR szFilename, const VARIANT& DWGVERSION)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szFilename, &DWGVERSION);
	return result;
}

BOOL CDDVue::CreateDXF(LPCTSTR szDXFFilename, long DXFversion, long lDXFPrecision)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szDXFFilename, DXFversion, lDXFPrecision);
	return result;
}

BOOL CDDVue::Explode(LPCTSTR entityHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle);
	return result;
}

BOOL CDDVue::TextUpdateByHandle(LPCTSTR entityHandle, LPCTSTR textValue)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle, textValue);
	return result;
}

BOOL CDDVue::GetEntityHeaderByHandle(LPCTSTR entityHandle, long* colour, BSTR* layerName, BSTR* lineType, long* LINEWEIGHT, double* extrusionX, double* extrusionY, double* extrusionZ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PI4 VTS_PBSTR VTS_PBSTR VTS_PI4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle, colour, layerName, lineType, LINEWEIGHT, extrusionX, extrusionY, extrusionZ);
	return result;
}

BOOL CDDVue::SetEntityColorByHandle(LPCTSTR entityHandle, long colour)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle, colour);
	return result;
}

BOOL CDDVue::SetEntityLayerByHandle(LPCTSTR entityHandle, LPCTSTR layerName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle, layerName);
	return result;
}

BOOL CDDVue::SetLayerState(LPCTSTR layerName, LPCTSTR layerState)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		layerName, layerState);
	return result;
}

BOOL CDDVue::SetPaths(LPCTSTR szSearchPaths)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szSearchPaths);
	return result;
}

BOOL CDDVue::CreateLine(BSTR* szNewObjectHandle, LPCTSTR szLocation, double x1, double y1, double z1, double x2, double y2, double z2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szLocation, x1, y1, z1, x2, y2, z2);
	return result;
}

BOOL CDDVue::GetTimeDWGEdited(BSTR* szEditTime)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szEditTime);
	return result;
}

BOOL CDDVue::RestoreView(LPCTSTR szViewName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szViewName);
	return result;
}

long CDDVue::GetDWGVersion(LPCTSTR szFilename)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		szFilename);
	return result;
}

BOOL CDDVue::SetLayerColor(LPCTSTR szLayerName, long colour)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szLayerName, colour);
	return result;
}

BOOL CDDVue::CreateText(BSTR* szNewObjectHandle, LPCTSTR szLocation, LPCTSTR szTextValue, LPCTSTR szStyleName, double dX, double dY, double dZ, double dHeight, double dRotationAngle, LPCTSTR szJustification, const VARIANT& pWidthFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szLocation, szTextValue, szStyleName, dX, dY, dZ, dHeight, dRotationAngle, szJustification, &pWidthFactor);
	return result;
}

BOOL CDDVue::SaveAsBMP(LPCTSTR szFilename, const VARIANT& width, const VARIANT& height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szFilename, &width, &height);
	return result;
}

void CDDVue::ClientToDWG(double x, double y, double* pDWGx, double* pDWGy)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x, y, pDWGx, pDWGy);
}

void CDDVue::Regen()
{
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CDDVue::SaveAsDWF(LPCTSTR szDWFFilename, long dVersion, long DFILETYPE)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szDWFFilename, dVersion, DFILETYPE);
	return result;
}

BOOL CDDVue::InsertDWG(LPCTSTR szDWGFilename)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szDWGFilename);
	return result;
}

BOOL CDDVue::unlockKey(LPCTSTR enableCode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		enableCode);
	return result;
}

BOOL CDDVue::ContextMenuCommand(short nCommand)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nCommand);
	return result;
}

void CDDVue::ZoomExtents()
{
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CDDVue::ZoomPrevious()
{
	BOOL result;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CDDVue::ShowThumbnail(short nThumbnail)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		nThumbnail);
	return result;
}

BOOL CDDVue::ShowThumbnailInDWG(LPCTSTR pszDrawingFilename, short nThumbnail)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pszDrawingFilename, nThumbnail);
	return result;
}

BOOL CDDVue::PrintDraft(const VARIANT& showPrintDialog, const VARIANT& Monochrome, const VARIANT& currentView)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&showPrintDialog, &Monochrome, &currentView);
	return result;
}

BOOL CDDVue::PrintDraftDWG(LPCTSTR pszDWGFilename)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pszDWGFilename);
	return result;
}

BOOL CDDVue::SaveAsSVG(LPCTSTR szFilename)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szFilename);
	return result;
}

BOOL CDDVue::GetPoint(VARIANT* dXYZ, short nRubberBand, const VARIANT& dBaseXYZ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2 VTS_VARIANT;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		dXYZ, nRubberBand, &dBaseXYZ);
	return result;
}

void CDDVue::DWGToClient(double x, double y, double* pX, double* pY)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x, y, pX, pY);
}

BOOL CDDVue::SelectFromDrawing(BSTR* selectedHandles)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		selectedHandles);
	return result;
}

BOOL CDDVue::ImportDWF(LPCTSTR DWFFilename, long* backgroundColor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PI4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DWFFilename, backgroundColor);
	return result;
}

BOOL CDDVue::DeleteEntity(LPCTSTR entityHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle);
	return result;
}

BOOL CDDVue::CreateCircle(BSTR* szNewObjectHandle, LPCTSTR szLocation, double centerPtX, double centerPtY, double centerPtZ, double radius)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szLocation, centerPtX, centerPtY, centerPtZ, radius);
	return result;
}

void CDDVue::ZoomWindowCoordinates(double x1, double y1, double x2, double y2)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x1, y1, x2, y2);
}

BOOL CDDVue::ZoomEntityExtents(LPCTSTR szEntityHandle, double zoomFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szEntityHandle, zoomFactor);
	return result;
}

BOOL CDDVue::HighlightEntity(LPCTSTR szEntityHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szEntityHandle);
	return result;
}

BOOL CDDVue::CopyToClipboard()
{
	BOOL result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CDDVue::CreateTextStyle(LPCTSTR szTextStyleName, LPCTSTR szSHXFilename)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szTextStyleName, szSHXFilename);
	return result;
}

void CDDVue::ViewRotateXAxis(double rotationAngle)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 rotationAngle);
}

void CDDVue::ViewRotateYAxis(double rotationAngle)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 rotationAngle);
}

void CDDVue::ViewRotateZAxis(double rotationAngle)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 rotationAngle);
}

BOOL CDDVue::GetEntityRangeByHandle(LPCTSTR entityHanldle, double* lowerX, double* lowerY, double* lowerZ, double* higherX, double* higherY, double* higherZ)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHanldle, lowerX, lowerY, lowerZ, higherX, higherY, higherZ);
	return result;
}

BOOL CDDVue::CreateHatchFromPolyline(BSTR* szNewObjectHandle, LPCTSTR szPolylineHandle, LPCTSTR szHatchPatternName, double scaleFactor)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_BSTR VTS_R8;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szPolylineHandle, szHatchPatternName, scaleFactor);
	return result;
}

BOOL CDDVue::GetPolylineAreaPerimeterByHandle(LPCTSTR entityHandle, double* area, double* perimeter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PR8 VTS_PR8;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		entityHandle, area, perimeter);
	return result;
}

BOOL CDDVue::PrintDraftLayouts(const VARIANT& layoutNames)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&layoutNames);
	return result;
}

BOOL CDDVue::GetXMLFromXData(BSTR* szNewObjectHandle, LPCTSTR szEntityHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szEntityHandle);
	return result;
}

BOOL CDDVue::GetRGB(short index, short* red, short* green, short* blue)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PI2 VTS_PI2 VTS_PI2;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		index, red, green, blue);
	return result;
}

BOOL CDDVue::SetRGB(short index, short red, short green, short blue)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		index, red, green, blue);
	return result;
}

void CDDVue::PanWindowCoordinates(long x, long y)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 x, y);
}

BOOL CDDVue::PanByDirection(LPCTSTR direction, double distance)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		direction, distance);
	return result;
}

BOOL CDDVue::SetPenWidthInInches(short colourIndex, double penThickness)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		colourIndex, penThickness);
	return result;
}

BOOL CDDVue::SetPenWidthInMillimetres(short colourIndex, double penThickness)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_R8;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		colourIndex, penThickness);
	return result;
}

BOOL CDDVue::GetPenWidthInInches(short colourIndex, double* penThickness)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PR8;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		colourIndex, penThickness);
	return result;
}

BOOL CDDVue::GetPenWidthInMillimetres(short colourIndex, double* penThickness)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PR8;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		colourIndex, penThickness);
	return result;
}

CString CDDVue::BuildVersion(long* release, long* major, long* minor, long* build)
{
	CString result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		release, major, minor, build);
	return result;
}

BOOL CDDVue::SetTextStyleByHandle(LPCTSTR handle, LPCTSTR textStyleName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		handle, textStyleName);
	return result;
}

BOOL CDDVue::CreateArc(BSTR* szNewObjectHandle, LPCTSTR szLocation, double dCentreX, double dCentreY, double dRadius, double dStartAngle, double dEndAngle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szLocation, dCentreX, dCentreY, dRadius, dStartAngle, dEndAngle);
	return result;
}

BOOL CDDVue::SetDefaultPrinter(LPCTSTR szPrinterName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szPrinterName);
	return result;
}

BOOL CDDVue::SetPrinterProperties(LPCTSTR szProperties, const VARIANT& pszDriver, const VARIANT& pszDevice)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szProperties, &pszDriver, &pszDevice);
	return result;
}

BOOL CDDVue::RenameTableEntry(long eTable, LPCTSTR szOldName, LPCTSTR szNewName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		eTable, szOldName, szNewName);
	return result;
}

BOOL CDDVue::SetAllEntityLineweights(LPCTSTR szLocation, long LINEWEIGHT, const VARIANT& filterColour, const VARIANT& filterLayer)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szLocation, LINEWEIGHT, &filterColour, &filterLayer);
	return result;
}

BOOL CDDVue::CreateLWPolyline(BSTR* szNewObjectHandle, LPCTSTR szLocation, VARIANT* ptPoints)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_BSTR VTS_PVARIANT;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szNewObjectHandle, szLocation, ptPoints);
	return result;
}

void CDDVue::LWDisplay(BOOL displayLineweights)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 displayLineweights);
}

void CDDVue::ErrorMessage(BSTR* szErrorMessage, long lErrorNumber)
{
	static BYTE parms[] =
		VTS_PBSTR VTS_I4;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szErrorMessage, lErrorNumber);
}

long CDDVue::AuditDrawing(LPCTSTR DWGFilename, LPCTSTR recoveredDWGFilename, long* numberEntities, long* numberErrors, long* numberFixes)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		DWGFilename, recoveredDWGFilename, numberEntities, numberErrors, numberFixes);
	return result;
}

BOOL CDDVue::SetEntityVisibilityByHandle(long visibility, LPCTSTR szEntityHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		visibility, szEntityHandle);
	return result;
}

void CDDVue::PageSetup()
{
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
