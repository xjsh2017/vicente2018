#if !defined(AFX_DDVUE_H__52585635_B19C_4E46_91AE_ECD5C7149B38__INCLUDED_)
#define AFX_DDVUE_H__52585635_B19C_4E46_91AE_ECD5C7149B38__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CDDVue wrapper class

class CDDVue : public CWnd
{
protected:
	DECLARE_DYNCREATE(CDDVue)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x62274dee, 0xb5bf, 0x48f8, { 0x91, 0xf, 0x4f, 0x79, 0x7c, 0xcb, 0xcd, 0x96 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	long GetErrorNumber();
	void SetErrorNumber(long);
	BOOL GetDoubleBuffer();
	void SetDoubleBuffer(BOOL);
	BOOL GetRightMouseMenu();
	void SetRightMouseMenu(BOOL);
	long GetRender();
	void SetRender(long);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	long GetRenderMode();
	void SetRenderMode(long);
	long GetTriPointsPerEdge();
	void SetTriPointsPerEdge(long);
	double GetTriMaxFacetEdgeLength();
	void SetTriMaxFacetEdgeLength(double);
	double GetTriNormalTolerance();
	void SetTriNormalTolerance(double);
	double GetTriSurfaceTolerance();
	void SetTriSurfaceTolerance(double);
	double GetTriGridAspectRatio();
	void SetTriGridAspectRatio(double);
	long GetTriMaxNumGridLines();
	void SetTriMaxNumGridLines(long);
	BOOL GetMonochrome();
	void SetMonochrome(BOOL);
	BOOL GetR14Convert();
	void SetR14Convert(BOOL);
	short GetDbmod();
	void SetDbmod(short);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	BOOL GetCaching();
	void SetCaching(BOOL);
	BOOL GetDragAndDrop();
	void SetDragAndDrop(BOOL);
	BOOL GetRecoverIfNeeded();
	void SetRecoverIfNeeded(BOOL);

// Operations
public:
	void AboutBox();
	BOOL Open(LPCTSTR bstrDrawingFilename, const VARIANT& bstrDrawingPassword, const VARIANT& pZoomExtents);
	BOOL Close();
	BOOL Display();
	long XMLReport(LPCTSTR szXMLFilename, long attributes, long attributeDefinitions, long referenceFiles, long lLayers, long lLayouts, long lSystemVariables, long lImages, long lText);
	void ZoomIn(double dFactor);
	void ZoomOut(double dFactor);
	BOOL AttributeUpdateByHandle(LPCTSTR attributeValue, LPCTSTR attributeHandle);
	BOOL InsertBlock(BSTR* szNewObjectHandle, LPCTSTR space, LPCTSTR blockName, double x, double y, double z, double xs, double ys, double zs, double rotationAngle);
	BOOL SetLayout(LPCTSTR layoutName);
	BOOL SaveDrawing(LPCTSTR szFilename, const VARIANT& DWGVERSION);
	BOOL CreateDXF(LPCTSTR szDXFFilename, long DXFversion, long lDXFPrecision);
	BOOL Explode(LPCTSTR entityHandle);
	BOOL TextUpdateByHandle(LPCTSTR entityHandle, LPCTSTR textValue);
	BOOL GetEntityHeaderByHandle(LPCTSTR entityHandle, long* colour, BSTR* layerName, BSTR* lineType, long* LINEWEIGHT, double* extrusionX, double* extrusionY, double* extrusionZ);
	BOOL SetEntityColorByHandle(LPCTSTR entityHandle, long colour);
	BOOL SetEntityLayerByHandle(LPCTSTR entityHandle, LPCTSTR layerName);
	BOOL SetLayerState(LPCTSTR layerName, LPCTSTR layerState);
	BOOL SetPaths(LPCTSTR szSearchPaths);
	BOOL CreateLine(BSTR* szNewObjectHandle, LPCTSTR szLocation, double x1, double y1, double z1, double x2, double y2, double z2);
	BOOL GetTimeDWGEdited(BSTR* szEditTime);
	BOOL RestoreView(LPCTSTR szViewName);
	long GetDWGVersion(LPCTSTR szFilename);
	BOOL SetLayerColor(LPCTSTR szLayerName, long colour);
	BOOL CreateText(BSTR* szNewObjectHandle, LPCTSTR szLocation, LPCTSTR szTextValue, LPCTSTR szStyleName, double dX, double dY, double dZ, double dHeight, double dRotationAngle, LPCTSTR szJustification, const VARIANT& pWidthFactor);
	BOOL SaveAsBMP(LPCTSTR szFilename, const VARIANT& width, const VARIANT& height);
	void ClientToDWG(double x, double y, double* pDWGx, double* pDWGy);
	void Regen();
	BOOL SaveAsDWF(LPCTSTR szDWFFilename, long dVersion, long DFILETYPE);
	BOOL InsertDWG(LPCTSTR szDWGFilename);
	BOOL unlockKey(LPCTSTR enableCode);
	BOOL ContextMenuCommand(short nCommand);
	void ZoomExtents();
	BOOL ZoomPrevious();
	BOOL ShowThumbnail(short nThumbnail);
	BOOL ShowThumbnailInDWG(LPCTSTR pszDrawingFilename, short nThumbnail);
	BOOL PrintDraft(const VARIANT& showPrintDialog, const VARIANT& Monochrome, const VARIANT& currentView);
	BOOL PrintDraftDWG(LPCTSTR pszDWGFilename);
	BOOL SaveAsSVG(LPCTSTR szFilename);
	BOOL GetPoint(VARIANT* dXYZ, short nRubberBand, const VARIANT& dBaseXYZ);
	void DWGToClient(double x, double y, double* pX, double* pY);
	BOOL SelectFromDrawing(BSTR* selectedHandles);
	BOOL ImportDWF(LPCTSTR DWFFilename, long* backgroundColor);
	BOOL DeleteEntity(LPCTSTR entityHandle);
	BOOL CreateCircle(BSTR* szNewObjectHandle, LPCTSTR szLocation, double centerPtX, double centerPtY, double centerPtZ, double radius);
	void ZoomWindowCoordinates(double x1, double y1, double x2, double y2);
	BOOL ZoomEntityExtents(LPCTSTR szEntityHandle, double zoomFactor);
	BOOL HighlightEntity(LPCTSTR szEntityHandle);
	BOOL CopyToClipboard();
	BOOL CreateTextStyle(LPCTSTR szTextStyleName, LPCTSTR szSHXFilename);
	void ViewRotateXAxis(double rotationAngle);
	void ViewRotateYAxis(double rotationAngle);
	void ViewRotateZAxis(double rotationAngle);
	BOOL GetEntityRangeByHandle(LPCTSTR entityHanldle, double* lowerX, double* lowerY, double* lowerZ, double* higherX, double* higherY, double* higherZ);
	BOOL CreateHatchFromPolyline(BSTR* szNewObjectHandle, LPCTSTR szPolylineHandle, LPCTSTR szHatchPatternName, double scaleFactor);
	BOOL GetPolylineAreaPerimeterByHandle(LPCTSTR entityHandle, double* area, double* perimeter);
	BOOL PrintDraftLayouts(const VARIANT& layoutNames);
	BOOL GetXMLFromXData(BSTR* szNewObjectHandle, LPCTSTR szEntityHandle);
	BOOL GetRGB(short index, short* red, short* green, short* blue);
	BOOL SetRGB(short index, short red, short green, short blue);
	void PanWindowCoordinates(long x, long y);
	BOOL PanByDirection(LPCTSTR direction, double distance);
	BOOL SetPenWidthInInches(short colourIndex, double penThickness);
	BOOL SetPenWidthInMillimetres(short colourIndex, double penThickness);
	BOOL GetPenWidthInInches(short colourIndex, double* penThickness);
	BOOL GetPenWidthInMillimetres(short colourIndex, double* penThickness);
	CString BuildVersion(long* release, long* major, long* minor, long* build);
	BOOL SetTextStyleByHandle(LPCTSTR handle, LPCTSTR textStyleName);
	BOOL CreateArc(BSTR* szNewObjectHandle, LPCTSTR szLocation, double dCentreX, double dCentreY, double dRadius, double dStartAngle, double dEndAngle);
	BOOL SetDefaultPrinter(LPCTSTR szPrinterName);
	BOOL SetPrinterProperties(LPCTSTR szProperties, const VARIANT& pszDriver, const VARIANT& pszDevice);
	BOOL RenameTableEntry(long eTable, LPCTSTR szOldName, LPCTSTR szNewName);
	BOOL SetAllEntityLineweights(LPCTSTR szLocation, long LINEWEIGHT, const VARIANT& filterColour, const VARIANT& filterLayer);
	BOOL CreateLWPolyline(BSTR* szNewObjectHandle, LPCTSTR szLocation, VARIANT* ptPoints);
	void LWDisplay(BOOL displayLineweights);
	void ErrorMessage(BSTR* szErrorMessage, long lErrorNumber);
	long AuditDrawing(LPCTSTR DWGFilename, LPCTSTR recoveredDWGFilename, long* numberEntities, long* numberErrors, long* numberFixes);
	BOOL SetEntityVisibilityByHandle(long visibility, LPCTSTR szEntityHandle);
	void PageSetup();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_DDVUE_H__52585635_B19C_4E46_91AE_ECD5C7149B38__INCLUDED_)
